import typing
from PyQt6.QtCore import Qt
from PyQt6 import QtCore
from PyQt6.QtWidgets import QApplication, QLabel, QWidget, QGridLayout, \
    QLineEdit, QPushButton, QMainWindow, QTableWidget, QTableWidgetItem, \
        QDialog, QVBoxLayout, QComboBox, QToolBar, QStatusBar, QMessageBox
import sys
from PyQt6.QtGui import QAction, QIcon
import sqlite3



class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Student Management System")

        file_menu_item = self.menuBar().addMenu("&File")
        help_menu_item = self.menuBar().addMenu("&Help")

        add_student_action = QAction(QIcon("icons/add.png"),"ADD Student", self)
        add_student_action.triggered.connect(self.insert)
        add_help_action = QAction("Help", self)
        about_action = QAction("About", self)
        about_action.triggered.connect(self.about)

        search_action = QAction(QIcon("icons/search.png"),"Search", self)
        search_action.triggered.connect(self.search)

        file_menu_item.addAction(add_student_action)
        file_menu_item.addAction(add_help_action)
        help_menu_item.addAction(about_action)
        help_menu_item.addAction(search_action)

        self.table = QTableWidget()
        self.table.setColumnCount(4)
        self.table.setHorizontalHeaderLabels(("Id","Name","Course","Mobile"))
        self.table.verticalHeader().setVisible(False)
        self.setCentralWidget(self.table)

        #create toolbar
        toolbar = QToolBar()
        toolbar.setMovable(True)
        self.addToolBar(toolbar)
        toolbar.addAction(add_student_action)
        toolbar.addAction(add_student_action)

        #create statusbar
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        
        self.table.cellClicked.connect(self.cell_clicked)
        
        edit_button = QPushButton("Edit record")
        edit_button.clicked.connect(self.edit)
        self.status_bar.addWidget(edit_button)
        
        delete_button = QPushButton("Delete record")
        delete_button.clicked.connect(self.delete)
        self.status_bar.addWidget(delete_button)

    def cell_clicked(self):

        children = self.findChildren(QPushButton)
        if children:
            for child in children:
                self.status_bar.removeWidget(child)

        edit_button = QPushButton("Edit record")
        edit_button.clicked.connect(self.edit)
        self.status_bar.addWidget(edit_button)
        
        delete_button = QPushButton("Delete record")
        delete_button.clicked.connect(self.delete)
        self.status_bar.addWidget(delete_button)
        
        
        

    def load_data(self):
        connection = sqlite3.connect("database.db")
        result = connection.execute("SELECT * FROM students")
        self.table.setRowCount(0)

        for row_number, row_data in enumerate(result):
            self.table.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.table.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        connection.close()
    
    def insert(self):
        dialog = InsertDialog()
        dialog.exec()

    def search(self):
        dialog = SearchDialog()
        dialog.exec()

    def edit(self):
        dialog = EditDialog()
        dialog.exec()

    def delete(self):
        dialog = DeleteDialog()
        dialog.exec()

    def about(self):
        dialog = AboutDialog()
        dialog.exec()

class AboutDialog(QMessageBox):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("About")
        content = """
This app is generated by human and it help us leran python better and 
understand lots of concepts..."""
        self.setText(content)
        

    

class DeleteDialog(QDialog):
    def __init__(self, ):
        super().__init__()
        self.setWindowTitle("Delete Student Data")


        layout = QGridLayout()
        confirmation = QLabel("Are you sure you wnat to delete")
        yes = QPushButton("yes")
        no = QPushButton("no")

        layout.addWidget(confirmation,0 , 0, 1, 2)
        layout.addWidget(yes, 1, 0)
        layout.addWidget(no, 1, 1)

        self.setLayout(layout)

        yes.clicked.connect(self.delete_student)
        

    def delete_student(self):
        index = main_window.table.currentRow()
        student_ID = main_window.table.item(index,0).text()

        connection = sqlite3.connect("database.db")
        cursor = connection.cursor()
        cursor.execute("DELETE from students WHERE id = ?",(student_ID,))
        connection.commit()
        cursor.close()
        connection.close()
        main_window.load_data()

        self.close()
        confirmation_widget = QMessageBox()
        confirmation_widget.setWindowTitle("success")
        confirmation_widget.setText("Deleted successfully.")
        confirmation_widget.exec()


class EditDialog(QDialog):
    def __init__(self, ):
        super().__init__()
        self.setWindowTitle("Modify Student Data")
        self.setFixedHeight(300)
        self.setFixedWidth(300)
        layout = QVBoxLayout()
        student_name = main_window.table.item(index,1)

        #Get student name
        index = main_window.table.currentRow()
        student_name = main_window.table.item(index,1).text()

        #get ID
        self.student_ID = main_window.table.item(index,0).text()

        #add student data
        self.student_name = QLineEdit(student_name)
        self.student_name.setPlaceholderText("Name")
        layout.addWidget(self.student_name)

        #add combo box of course
        course_name = main_window.table.item(index,2).text()
        self.course_name = QComboBox()
        courses = ["biology", "math","physics", "astronomy"]
        self.course_name.addItems(courses)
        self.course_name.setCurrentText(course_name)
        layout.addWidget(self.course_name)

        #add mobile phone
        mobile = main_window.table.item(index,3).text()
        self.mobile = QLineEdit(mobile)
        self.mobile.setPlaceholderText("Mobile")
        layout.addWidget(self.mobile)

        self.button = QPushButton("Update")
        self.button.clicked.connect(self.update_student)
        layout.addWidget(self.button)

        self.setLayout(layout)

    def update_student(self):
        connection = sqlite3.connect("database.db")
        cursor = connection.cursor()
        cursor.execute("UPDATE students SET name = ?, course = ?, mobile = ? WHERE id = ?",
                       (self.student_name.text(),self.course_name.itemText(self.course_name.currentIndex()),
                        self.mobile.text(),self.student_ID.text()))
        connection.commit()
        cursor.close()
        connection.close()
        main_window.load_data()

       


class InsertDialog(QDialog):
    def __init__(self, ):
        super().__init__()
        self.setWindowTitle("Insert Student Data")
        self.setFixedHeight(300)
        self.setFixedWidth(300)
        layout = QVBoxLayout()

        self.student_name = QLineEdit()
        self.student_name.setPlaceholderText("Name")
        layout.addWidget(self.student_name)
        
        self.course_name = QComboBox()
        courses = ["biology", "math","physics", "astronomy"]
        self.course_name.addItems(courses)
        layout.addWidget(self.course_name)

        self.mobile = QLineEdit()
        self.mobile.setPlaceholderText("Mobile")
        layout.addWidget(self.mobile)

        self.button = QPushButton("Submit")
        self.button.clicked.connect(self.add_student)
        layout.addWidget(self.button)

        self.setLayout(layout)

    def add_student(self):
        name = self.student_name.text()
        course = self.course_name.itemText(self.course_name.currentIndex())
        mobile = self.mobile.text()
        connection = sqlite3.connect("database.db")
        cursor = connection.cursor()
        cursor.execute("INSERT INTO students (name,course,mobile) VALUES (?,?,?)",(name,course,mobile))
        connection.commit()
        cursor.close()
        connection.close()
        main_window.load_data()

class SearchDialog(QDialog):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Search Student")
        self.setFixedWidth(300)
        self.setFixedHeight(300)

        layout = QVBoxLayout()
        self.student_name = QLineEdit()
        self.student_name.setPlaceholderText("Name")
        layout.addWidget(self.student_name)

        button = QPushButton("Search")
        button.clicked.connect(self.search)
        layout.addWidget(button)
        self.setLayout(layout)

    def search(self):
        name = self.student_name.text()
        connection = sqlite3.connect("database.db")
        cursor = connection.cursor()
        result = cursor.execute("SELECT * FROM students WHERE name = ?",(name,))
        rows = list(result)
        items = main_window.table.findItems(name, Qt.MatchFlag.MatchFixedString)
        for item in items:
            main_window.table.item(item.row(),1).setSelected(True)
        cursor.close()
        connection.close()

    

app = QApplication(sys.argv)
main_window = MainWindow()
main_window.show()
main_window.load_data()
sys.exit(app.exec())